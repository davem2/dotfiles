# To set your identify:
git config --global user.name "John Doe"
git config --global user.email johndoe@example.com

# To set your editor:
git config --global core.editor emacs

# To enable color:
git config --global color.ui true

# To stage all changes for commit:
git add --all

# To commit staged changes
git commit -m "Your commit message"

# To edit previous commit message
git commit --amend

# To push to the tracked master branch:
git push origin master

# To push to a specified repository:
git push git@github.com:username/project.git

# To delete the branch "branch_name"
git branch -D branch_name

# To see who commited which line in a file
git blame filename

# To sync a fork with the master repo:
git remote add upstream git@github.com:name/repo.git    # Set a new repo
git remote -v                                           # Confirm new remote repo
git fetch upstream                                      # Get branches
git branch -va                                          # List local - remote branches
git checkout master                                     # Checkout local master branch
git checkout -b new_branch                              # Create and checkout a new branch
git merge upstream/master                               # Merge remote into local repo
git show 83fb499                                        # Show what a commit did.
git show 83fb499:path/fo/file.ext                       # Shows the file as it appeared at 83fb499.
git diff branch_1 branch_2                              # Check difference between branches
git log                                                 # Show all the commits
git status                                              # Show the changes from last commit

# Stage and commit all changes (except new files)
git commit -am "Commit message"

# Revert changes since last commit
git checkout -- filename.c

# Add all untracked files (listed in red by "git status") to .gitignore file
git status -s | grep -e "^\?\?" | cut -c 4- >> .gitignore

# Tag a commit (for release etc..)
git tag v1.0
git tag -a v1.0 -m 'Annotated tag message'
git push origin v1.0 # tags are not pushed by default
git push origin --tags

# Delete last commit without rolling back local changes
git reset HEAD^

# Create archive of repository branch
git archive master --format=zip --output=archive.zip

# Stash away changes temporarily
git stash
git stash pop # restore stashed changes

# Recover from detached head state
git checkout master

# Create a patch containing changes made in last commit
git diff HEAD^ HEAD > patch.txt

# Apply a patch 
git apply patch.txt 
git am --signoff < patch.txt # apply the patch with signoff tag 
git apply --stat patch.txt # summarize changes
git apply --check patch.txt # show issues (if any)

# Squash last two commits into a single new commit
git reset --soft HEAD~2 
git commit

# Merge upstream changes into feature branch without creating a commit message
git pull --rebase upstream master
git checkout feature-x
git rebase master
git push --force origin feature-x

# Delete remote branch
git push origin --delete branchname

# Abort operation in progess 
git merge --abort
git rebase --abort
