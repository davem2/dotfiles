#! /usr/bin/env python2
#
# Clone of https://github.com/mnagel/clustergit
#


# Grab some libraries
import re
import sys
import os
import commands
from optparse import OptionParser

class bcolors:
    HEADER = '\033[95m'  # unused
    OKBLUE = '\033[94m'  # write operation succeeded
    OKGREEN = '\033[92m' # readonly operation succeeded
    WARNING = '\033[93m' # operation succeeded with non-default result
    FAIL = '\033[91m'    # operation did not succeed
    ENDC = '\033[0m'     # reset color

    def disable(self):
        self.HEADER = ''
        self.OKBLUE = ''
        self.OKGREEN = ''
        self.WARNING = ''
        self.FAIL = ''
        self.ENDC = ''


# Setup some stuff
dirname = './'
gitted  = False
mini    = True

parser = OptionParser(description="""
clustergit will scan through all subdirectories looking for a .git directory.
When it finds one it'll look to see if there are any changes and let you know.
If there are no changes it can also push and pull to/from a remote location.
""".strip())
parser.add_option("-d", "--dir",
                    dest    = "dirname",
                    action  = "store",
                    help    = "The directory to parse sub dirs from",
                    default = "."
                    )

parser.add_option("-v", "--verbose",
                  action    = "store_true",
                  dest      = "verbose",
                  default   = False,
                  help      = "Show the full detail of git status"
                  )

parser.add_option("-a", "--align",
                  action    = "store",
                  dest      = "align",
                  default   = 40,
                  type      = "int",
                  help      = "Repo name align (space padding)"
                  )

parser.add_option("-r", "--remote",
                action      = "store",
                dest        = "remote",
                default     = "",
                help        = "Set the remote name (remotename:branchname)"
                )

parser.add_option("--push",
                action      = "store_true",
                dest        = "push",
                default     = False,
                help        = "Do a 'git push' if you've set a remote with -r it will push to there"
                )

parser.add_option("-p", "--pull",
                action      = "store_true",
                dest        = "pull",
                default     = False,
                help        = "Do a 'git pull' if you've set a remote with -r it will pull from there"
                )

parser.add_option("-c", "--clear",
                action      = "store_true",
                dest        = "clear",
                default     = False,
                help        = "Clear screen on startup"
                )

parser.add_option("-C", "--count-dirty",
                action      = "store_true",
                dest        = "count",
                default     = False,
                help        = "Only display a count of not-clean repos"
                )

parser.add_option("-q", "--quiet",
                action      = "store_true",
                dest        = "quiet",
                default     = False,
                help        = "Skip startup info"
                )

parser.add_option("-H", "--hide-clean",
                action      = "store_true",
                dest        = "hide_clean",
                default     = False,
                help        = "Hide clean repos"
                )

parser.add_option("-R", "--relative",
                action      = "store_true",
                dest        = "relative",
                default     = False,
                help        = "Print relative paths"
                )

parser.add_option("-n", "--no-colors",
                action      = "store_false",
                dest        = "colors",
                default     = True,
                help        = "Disable ANSI color output"
                )

parser.add_option("-b", "--branch",
                action      = "store",
                dest        = "branch",
                default     = "master",
                help        = "Warn if not on this branch"
                )

parser.add_option("--recursive",
                action      = "store_true",
                dest        = "recursive",
                default     = False,
                help        = "Recursively search for git repos"
                )

parser.add_option("-e", "--exclude",
                action      = "append",
                dest        = "exclude",
                default     = [],
                help        = "Regex to exclude directories"
                )

# Now, parse the args
(options, args) = parser.parse_args()

#-------------------
def show_error(error="Undefined Error!"):
#-------------------
    """Writes an error to stderr"""
    sys.stderr.write(error)
    sys.exit(1)

def is_excluded(path):
    for ex in options.exclude:
        if re.search(ex, path):
            if options.verbose:
                print "skipping %s" % (path)
            return True
    return False

def run(command):
    if options.verbose:
        print "running %s" % (command)
    return commands.getoutput(command)

def check(dirname):
    """
    Check the subdirectories of a single directory.
    See if they are versioned in git and display the requested information.
    """
    # this method was extracted after the fact, but we need to write these...
    global gitted, dirties

    # See whats here
    files = os.listdir(dirname)
    files.sort()
    for infile in files:
        infile = os.path.join(dirname, infile)

        #is there a .git file
        if os.path.exists( os.path.join(infile, ".git") ):

            if options.verbose:
                sys.stdout.write("\n")
                sys.stdout.write("---------------- "+ infile +" -----------------\n")

            #Yay, we found one!
            gitted = True

            # OK, contains a .git file. Let's descend into it
            # and ask git for a status
            out = run('cd "%s"; LC_ALL=C git status' % infile)
            if options.verbose:
                sys.stdout.write(out + "\n")

            if options.relative:
                infile = os.path.relpath(infile, options.dirname)
            messages = []
            clean = True
            can_push = False
            can_pull = True
            if len(options.branch) > 0 and 'On branch ' + options.branch not in out:
                messages.append(bc.WARNING + "Not on branch %s" % options.branch + bc.ENDC)
                can_pull = False
                clean = False
            if re.search(r'nothing to commit.?.?working directory clean.?', out):
                messages.append(bc.OKBLUE + "No Changes" + bc.ENDC)
                can_push = True
            elif 'nothing added to commit but untracked files present' in out:
                messages.append(bc.WARNING + "Untracked files" + bc.ENDC)
                can_push = True
                clean = False
            else:
                messages.append(bc.FAIL + "Changes" + bc.ENDC)
                can_pull = False
                clean = False
            if 'Your branch is ahead of' in out:
                messages.append(bc.FAIL + "Unpushed commits" + bc.ENDC)
                can_pull = False
                clean = False
            else:
                can_push = False

            if clean:
                if not options.hide_clean:
                    messages = [bc.OKGREEN + "Clean" + bc.ENDC]
                else:
                    messages = []
            else:
                dirties += 1

            if can_push and options.push:
                # Push to the remote
                push = run(
                    'cd "%s"; LC_ALL=C git push %s'
                        % (infile, ' '.join(options.remote.split(":")))
                )
                if options.verbose:
                    sys.stdout.write(push + "\n")
                if re.search(r'\[(remote )?rejected\]', push):
                    messages.append(bc.FAIL + "Push rejected" + bc.ENDC)
                else:
                    messages.append(bc.OKBLUE + "Pushed OK" + bc.ENDC)

            if can_pull and options.pull:
                # Pull from the remote
                pull = run(
                    'cd "%s"; LC_ALL=C git pull %s'
                        % (infile, ' '.join(options.remote.split(":")))
                )
                if options.verbose:
                    sys.stdout.write(pull + "\n")
                if "Already up-to-date" in pull:
                    if not options.hide_clean:
                        messages.append(bc.OKGREEN + "Pulled nothing" + bc.ENDC)
                elif "CONFLICT" in pull:
                    messages.append(bc.FAIL + "Pull conflict" + bc.ENDC)
                elif "fatal: No remote repository specified." in pull:
                    messages.append(bc.WARNING + "Pull remote not configured" + bc.ENDC)
                elif "fatal: " in pull:
                    messages.append(bc.FAIL + "Pull fatal" + bc.ENDC)
                else:
                    messages.append(bc.OKBLUE + "Pulled" + bc.ENDC)
            
            if not options.count and messages:
                sys.stdout.write(infile.ljust(options.align) + ": ")
                sys.stdout.write(", ".join(messages) + "\n")
                sys.stdout.flush()

            # Come out of the dir and into the next
            run('cd ../')

            if options.verbose:
                sys.stdout.write("---------------- "+ infile +" -----------------\n")

#-------------------
# Now, onto the main event!
#-------------------
try:
    if options.clear:
        os.system('clear')

    if not options.quiet:
        sys.stdout.write('Starting git status...\n')
        sys.stdout.write('Scanning sub directories of %s\n' %options.dirname)

    bc = bcolors()
    if not options.colors:
        bc.disable()

    dirties = 0

    for (path, dirs, files) in os.walk(options.dirname, topdown=True):
        dirs[:] = [d for d in dirs if not is_excluded(os.path.join(path,d,""))]
        check(path)
        if not options.recursive:
            break

    if not gitted:
        show_error("Error: None of those sub directories had a .git file.\n")

    if options.count:
        sys.stdout.write(str(dirties) + "\n")
    if dirties == 0 and options.hide_clean:
        sys.stdout.write("All repos clean\n")

    if not options.quiet:
        sys.stdout.write("Done\n")
except (KeyboardInterrupt, SystemExit):
        sys.stdout.write("\n")
        pass
